---
AWSTemplateFormatVersion: '2010-09-09'
Description: A basic template for creating a Lambda-backed API Gateway for use as
  a custom identity provider in AWS Transfer for SFTP. It authenticates against an entry in AWS Secrets Manager
  of the format SFTP/<username>. Additionaly, the secret must hold the key-value pairs for all user properties returned
  to AWS Transfer. You can modify the Lambda function code to do something different after deployment.
Parameters:
  TransferServerName:
    Type: String
    Default: "tf-transfer-server"
    Description: "Name of the corresponding transfer server"
Outputs:
  StackArn:
    Value:
      Ref: AWS::StackId
  TransferIdentityProviderUrl:
    Description: URL to pass to AWS Transfer CreateServer call as part of optional IdentityProviderDetails
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: CustomIdentityProviderApi
        - ".execute-api."
        - Ref: AWS::Region
        - ".amazonaws.com/"
        - Ref: ApiStage
  TransferIdentityProviderInvocationRole:
    Description: IAM Role to pass to AWS Transfer CreateServer call as part of optional IdentityProviderDetails
    Value:
      Fn::GetAtt: TransferIdentityProviderRole.Arn
Resources:
  CustomIdentityProviderApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
        - ' '
        - - Ref: TransferServerName
          - Transfer Custom Identity Provider basic template API
      Description: API used for GetUserConfig requests
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
        - REGIONAL
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Ref: TransferServerName
            - "lambda-execution-role"
      Description:
        Fn::Join:
          - ' '
          - - Ref: TransferServerName
            - Lambda Execution Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaSecretsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SFTP/*
  ApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Ref: TransferServerName
            - "api-cloudwatch-role"
      Description:
        Fn::Join:
          - ' '
          - - Ref: TransferServerName
            - IAM role used by API Gateway to log API requests to CloudWatch
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"
  ApiLoggingAccount:
    Type: AWS::ApiGateway::Account
    DependsOn:
    - CustomIdentityProviderApi
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ApiCloudWatchLogsRole.Arn
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: false
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: CustomIdentityProviderApi
      StageName: prod
  ApiDeployment:
    DependsOn:
    - GetUserConfigRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      StageName: dummystagefordeployment
  TransferIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      Name:
        Fn::Join:
          - '-'
          - - Ref: TransferServerName
            - "transfer-id-provider-role"
      Description:
        Fn::Join:
          - ' '
          - - Ref: TransferServerName
            - IAM role for Transfer Server to execute API Gateway custom auth provider
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: TransferCanInvokeThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
              Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/prod/GET/*
      - PolicyName: TransferCanReadThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - apigateway:GET
            Resource: "*"
  GetUserConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Sub: |
            import os
            import json
            import boto3
            import base64
            from botocore.exceptions import ClientError

            def lambda_handler(event, context):
                # Begin constructing response 
                response_data = {}

                if 'username' not in event or 'serverId' not in event:
                    return response_data

                # It is recommended to verify server ID against some value, this template does not verify server ID
                input_server_id = event['serverId']
                input_username = event['username']
                print("Username: {}, ServerId: {}".format(input_username, input_server_id))

                if 'password' in event:
                    input_password = event['password']
                else: 
                    print("No password, checking for SSH public key")
                    input_password = ''

                # Lookup user's secret which can contain the password or SSH public keys
                secrets_manager_response = get_secret("SFTP/" + input_username)
                
                if secrets_manager_response != None:
                    user_info_secret_dict = json.loads(secrets_manager_response)
                else: 
                    # There was an error when calling secrets manager, most likely the username doesn't exist
                    return response_data
                
                # If we have an incoming password then we are performing password auth and need to validate it agains the Secrets entry
                if input_password != '':
                    # Password Auth Flow - Check if we have a Password Key/Value pair in our Secrets Entry
                    if 'Password' in user_info_secret_dict:
                        response_password = user_info_secret_dict['Password']
                    else:
                        print("Unable to authenticate user - No field match in Secret for password")
                        return response_data

                    # Password Auth Flow - Check for password mismatch
                    if response_password != input_password:
                        print("Unable to authenticate user - Incoming password does not match stored")
                        return response_data
                else:
                    # SSH Public Key Auth Flow - The incoming password was empty so we are trying ssh auth and need to return the public key data if we have it
                    if 'PublicKey' in user_info_secret_dict:
                        response_data['PublicKeys'] = [ user_info_secret_dict['PublicKey'] ]
                    else:
                        print("Unable to authenticate user - No public keys found")
                        return response_data

                # If we've got this far then we've either authenticated the user by password or we're using SSH public key auth and
                # we've begun constructing the data response. Check for each key value pair.
                # These are required so set to empty string if missing
                if 'Role' in user_info_secret_dict:
                    response_data['Role'] = user_info_secret_dict['Role']
                else:
                    print("No field match for role - Set empty string in response")
                    response_data['Role'] = ''
                
                # These are optional so ignore if not present    
                if 'Policy' in user_info_secret_dict:
                    response_data['Policy'] = user_info_secret_dict['Policy']
                
                if 'HomeDirectory' in user_info_secret_dict:
                    response_data['HomeDirectory'] = user_info_secret_dict['HomeDirectory']
                
                return response_data
             
            # This function calls out to Secrets Manager to lookup user and returns None if there is an error. 
            def get_secret(secret_name):
                # Create a Secrets Manager client
                client = boto3.session.Session().client(
                    service_name='secretsmanager',
                    region_name=os.environ['AWS_REGION']
                )

                try:
                    get_secret_value_response = client.get_secret_value(
                        SecretId=secret_name
                    )
                    # Decrypts secret using the associated KMS CMK.
                    # Depending on whether the secret is a string or binary, one of these fields will be populated.
                    if 'SecretString' in get_secret_value_response:
                        secret = get_secret_value_response['SecretString']
                        return secret
                    else:
                        decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
                        return decoded_binary_secret
                except ClientError as e:
                    print('Error Talking to SecretsManager: ' + e.response['Error']['Code'])
                    return None
      FunctionName:
        Fn::Join:
          - '-'
          - - Ref: TransferServerName
            - "GetUserConfigLambda"
      Description:
        Fn::Join:
            - ' '
            - - Ref: TransferServerName
              - A function to lookup and return user data from AWS Secrets Manager.
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: python3.7
  GetUserConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt: GetUserConfigLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: CustomIdentityProviderApi
          - "/*"
  ServersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Fn::GetAtt:
        - CustomIdentityProviderApi
        - RootResourceId
      PathPart: servers
  ServerIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: ServersResource
      PathPart: "{serverId}"
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: ServerIdResource
      PathPart: users
  UserNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: UsersResource
      PathPart: "{username}"
  GetUserConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: UserNameResource
      PathPart: config
  GetUserConfigRequest:
    DependsOn: GetUserConfigLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - GetUserConfigLambda
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "username": "$input.params('username')",
              "password": "$util.escapeJavaScript($input.params('Password')).replaceAll("\\'","'")",
              "serverId": "$input.params('serverId')"
            }
      RequestParameters:
        method.request.header.Password: false
      ResourceId:
        Ref: GetUserConfigResource
      RestApiId:
        Ref: CustomIdentityProviderApi
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: UserConfigResponseModel
  GetUserConfigResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ContentType: application/json
      Description: API response for GetUserConfig
      Name: UserConfigResponseModel
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: UserUserConfig
        type: object
        properties:
          HomeDirectory:
            type: string
          Role:
            type: string
          Policy:
            type: string
          PublicKeys:
            type: array
            items:
              type: string
